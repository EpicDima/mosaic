import org.jetbrains.kotlin.gradle.plugin.KotlinCompilation
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile
import org.jetbrains.kotlin.gradle.targets.jvm.KotlinJvmTarget
import org.jetbrains.kotlin.gradle.dsl.JvmTarget

buildscript {
	dependencies {
		classpath libs.kotlin.plugin.core
		classpath libs.kotlin.plugin.compose
		classpath libs.maven.publish.gradlePlugin
		classpath libs.dokka.gradlePlugin
		classpath libs.cite.gradlePlugin
		classpath libs.poko.gradlePlugin
		classpath libs.spotless.gradlePlugin
		classpath libs.binary.compatibility.validator.gradlePlugin
		classpath libs.cklib.gradlePlugin
	}
	repositories {
		mavenCentral()
		google()
		gradlePluginPortal()
	}
}

apply plugin: 'org.jetbrains.dokka'

allprojects {
	group = GROUP
	version = VERSION_NAME

	repositories {
		mavenCentral()
		google()
	}

	tasks.withType(JavaCompile).configureEach {
		sourceCompatibility = JavaVersion.VERSION_1_8
		targetCompatibility = JavaVersion.VERSION_1_8
	}

	tasks.withType(KotlinJvmCompile).configureEach {
		compilerOptions.jvmTarget = JvmTarget.JVM_1_8
	}

	tasks.withType(KotlinCompile).configureEach {
		compilerOptions.freeCompilerArgs.add('-Xjvm-default=all')
	}

	tasks.withType(AbstractTestTask).configureEach {
		testLogging {
			if (System.getenv('CI') == 'true') {
				events = ['started', 'failed', 'skipped', 'passed']
			}
			exceptionFormat 'full'
		}
	}

	plugins.withId('org.jetbrains.kotlin.multiplatform') {
		kotlin.targets.configureEach { target ->
			if (target instanceof KotlinJvmTarget) {
				def allJvmTests = tasks.register("all${target.name.capitalize()}Tests") {
					it.group = LifecycleBasePlugin.VERIFICATION_GROUP
				}
				for (testJdk in [8, 11, 17, 21, 23]) {
					target.testRuns.create("Jdk$testJdk") { run ->
						allJvmTests.configure {
							it.dependsOn(run.executionTask)
						}
						run.executionTask.configure { test->
							test.javaLauncher = javaToolchains.launcherFor {
								it.languageVersion = JavaLanguageVersion.of(testJdk)
							}
						}
					}
				}

				// Adding additional test runs somehow removes the configuration capabilities which allow
				// automatic resolution of the junit test dependency. Add it explicitly instead.
				target.compilations.named(KotlinCompilation.TEST_COMPILATION_NAME).configure {
					dependencies {
						implementation(libs.kotlin.test.junit)
					}
				}
			}
		}
	}

	apply plugin: 'com.diffplug.spotless'
	spotless {
		kotlin {
			target('src/**/*.kt')
			ktlint(libs.ktlint.core.get().version)
				.editorConfigOverride([
					'ktlint_standard_filename': 'disabled',
					// Making something an expression body should be a choice around readability.
					'ktlint_standard_function-expression-body': 'disabled',
					'ktlint_standard_property-naming': 'disabled',
					'ktlint_function_naming_ignore_when_annotated_with': 'Composable',
					'ktlint_compose_modifier-missing-check': 'disabled',
					'ktlint_compose_compositionlocal-allowlist': 'disabled',
					'compose_treat_as_lambda': 'MeasurePolicy'
				])
				.customRuleSets([
					libs.ktlint.composeRules.get().toString(),
				])
		}
	}
}
